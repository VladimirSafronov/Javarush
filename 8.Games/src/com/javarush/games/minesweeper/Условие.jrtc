
Состояние ячеек игрового поля нужно где-то хранить.
Для этой задачи создадим матрицу (двумерный массив) с размерами игрового поля.
Матрицу нужно заполнить объектами GameObject по принципу:
gameField[y][x] = new GameObject(x, y);

Теперь отобразим все ячейки на экране.
В этом нам поможет метод setCellColor(int, int, Color) класса Game, параметры которого &mdash; координаты и цвет ячейки.
Вызовем его для каждой ячейки и передадим в качестве параметров ее координаты и любой цвет (например, Color.ORANGE).
Предлагаем вынести отрисовку матрицы в отдельный метод createGame(),
который потом вызовем из метода initialize(). Запусти программу и посмотри, что получилось.

Подсказка: чтобы вызвать метод setCellColor(int, int, Color) для каждой ячейки матрицы, воспользуйся циклами.


Требования:
1.	В классе MinesweeperGame должна существовать приватная матрица (двумерный массив) gameField с типом GameObject[][] и размером SIDEхSIDE.
2.	В классе MinesweeperGame должен существовать приватный метод void createGame().
3.	В методе createGame() нужно заполнить все ячейки массива gameField новыми объектами типа GameObject с соответствующими координатами x и y.
4.	В методе createGame() для каждой ячейки массива gameField нужно вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y, а также любой цвет (например, Color.ORANGE).
5.	В методе initialize() должен быть вызван метод createGame().


Игра сапер (4/16)

Так как в нашей игре будут использоваться игровые объекты (ячейки), создадим для их описания
отдельный класс GameObject. Давай подумаем, какие параметры должны быть у игрового объекта? Конечно же, это
координаты его размещения на игровом поле, x и y. Ну и куда же без конструктора? После того, как все сделаешь,
не забудь запустить программу и посмотреть на результат.
